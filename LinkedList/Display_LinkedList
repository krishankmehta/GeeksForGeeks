#include<stdio.h>
#include<stdlib.h>
#include<limits.h>
#include<stdbool.h>



struct Node
{
    int data;
    struct Node * next;
};

struct Node* first = NULL;



void create(int arr[], int size)
{
    
    struct Node *p,*t;
    first = (struct Node*)(malloc(sizeof(struct Node)));
    first->data = arr[0];
    first->next = NULL;
    p = first;
    
    for(int i=1;i<size;i++)
    {
        t = (struct Node*)(malloc(sizeof(struct Node)));
        t->data = arr[i];
        t->next = NULL;
        p->next = t;
        p = p->next;
    }
}
void display(struct Node *temp)
{
    
    while(temp!=NULL)
    {
        printf("%d ",temp->data);
        temp = temp->next;
    }
    printf("\n");
}

void reverse_display(struct Node *temp)
{
    if(temp!= NULL)
    {
        reverse_display(temp->next);
        printf("%d ",temp->data);
    }
}


int count_nodes(struct Node* temp)
{
    if(temp!= NULL)
    {
        return count_nodes(temp->next) + 1;
    }
}

int sum_nodes(struct Node *temp)
{
    int sum = 0;
    while(temp!=NULL)
    {
        sum+=temp->data;
        temp = temp->next;
    }
    return sum;
}

int sum_nodes_recursive(struct Node *temp)
{
    if(temp==0)
    {
        return 0;
    }
    else
    {
        return sum_nodes_recursive(temp->next) + temp->data;
    }
}

int find_max(struct Node* temp)
{
    int max = INT_MIN;
    while(temp!=NULL)
    {
            if(temp->data > max)
            {
                max = temp->data;
            }
            temp = temp->next;
    }
return max;
}

int find_max_recursive(struct Node* temp)
{
    static int max  = INT_MIN;
    if(temp == NULL)
    {
        return INT_MIN;
    }
    max = find_max_recursive(temp->next);
    if(max>temp->data)
    {
        return max;
    }
    else
    {
        return temp->data;
    }
}

bool search(struct Node *temp, int val)
{
    if(temp==NULL)
    {
        return false;
    }
    if(temp->data == val)
    {
        return true;
    }
    
    return search(temp->next,val);
}

void insert(struct Node *temp, int pos, int val)
{
 
 if(pos < 0 || pos > count_nodes(first))
 return;
 
 struct Node* newnode  = (struct Node*)malloc(sizeof(struct Node));
 newnode->data = val;
 newnode->next = NULL;
 
 if(pos == 1)
 {
     newnode->next = temp;
     first = newnode;
 }
 else
 {
     while(pos-1)
     {
         temp = temp->next;
         --pos;
     }
     newnode->next = temp->next->next;
     temp->next = newnode;
 }
}

struct Node *linked_list_insert(int data)
{
    static struct Node *q = NULL;
    static struct Node *head = NULL;
    static int count = 1;
        struct Node* nodes = (struct Node*)malloc(sizeof(struct Node));
        nodes->data = data;
        nodes->next = NULL;
        if(count == 1)
        {
           head = nodes;
           ++count;
           q = head;
           return head;
        }
         q->next = nodes;
         q = nodes;
         return head;
}


struct Node* delete(struct Node* temp,int position)
{
    
    struct Node * p = temp;
    struct Node * q = NULL;
    if(position==1)
    {
        temp = temp->next;
        free(p);
        return temp;
    }
    while(position-1)
    {
        q = p;
        p = p->next;
        --position;
    }
    q->next = p->next;
    free(p);
    return temp;
    // struct Node* temp_ptr = temp;
    // temp = temp->next;
    // free(temp_ptr);
    // return temp;
}

void remove_duplicate(struct Node* temp)
{
    struct Node *q = temp;
    struct Node *p = temp->next;
    
    while(p)
    {
    if(q->data == p->data)
    {
        q->next = p->next;
        p = p->next;
    }
    else
    {
    q = q->next;
    p = p->next;
    }
    }
    
    //10 20 20 30 40 40 50
}


void reverse(struct Node** temp)
{
    
    
    struct Node *p = *temp;
    struct Node *q = NULL;
    struct Node *ptr = NULL;
    
    
    while(p!=NULL)
    {
        ptr = p->next;
        p->next = q;
        q = p;
        p = ptr;
    }
    *temp = q;
    
    //10 20 30 40 50 60 70
}



int main()
{
    int arr[] = {11,24,23,42,56,16,127,98};
    int size_t = sizeof(arr)/sizeof(arr[0]);
    create(arr,size_t);
    display(first);
    reverse_display(first);
    int nodes = count_nodes(first);
    printf("\n%d",nodes);
    int sum = sum_nodes(first);
    printf("\n%d",sum);
    int sum_2 = sum_nodes_recursive(first);
    printf("\n%d",sum_2);
    int max = find_max(first);
    printf("\n%d",max);
    int max_2 = find_max_recursive(first);
    printf("\n%d",max_2);
    if(search(first,42))
    {
        printf("\nTrue");
    }
    else
    {
        printf("\nFalse");
    }
    printf("\n");
    int position = 3;
    int val = 20;
    insert(first,position,val);
    insert(first,4,489);
    while(first)
    {
        printf("%d ",first->data);
        first = first->next;
    }
    struct Node *ptr = linked_list_insert(45);
    ptr = linked_list_insert(100);
    ptr = linked_list_insert(20);
    ptr = linked_list_insert(50);
    ptr = linked_list_insert(70);
    printf("\n");
    // while(ptr)
    // {
    //     printf("%d ",ptr->data);
    //     ptr = ptr->next;
    // }
    int pos = 1;
    ptr = delete(ptr,pos);
    while(ptr)
    {
        printf("%d ",ptr->data);
        ptr = ptr->next;
    }
    printf("\n");
    struct Node *rem = linked_list_insert(10);
    rem = linked_list_insert(20);
    rem = linked_list_insert(20);
    rem = linked_list_insert(30);
    rem = linked_list_insert(40);
    rem = linked_list_insert(40);
    rem = linked_list_insert(50);
    rem = linked_list_insert(60);
    rem = linked_list_insert(70);
    rem = linked_list_insert(70);
    rem = linked_list_insert(70);
    rem = linked_list_insert(80);
    rem = linked_list_insert(80);
    rem = linked_list_insert(90);
    remove_duplicate(rem);
    struct Node *rem_ptr = rem;
    while(rem_ptr)
    {
        printf("%d ",rem_ptr->data);
        rem_ptr = rem_ptr->next;
    }
    printf("\n");
    reverse(&rem);
    while(rem)
    {
        printf("%d ",rem->data);
        rem = rem->next;
    }
    
}
